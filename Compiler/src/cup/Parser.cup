/* Package and import specifications */
import ASTNodes.*;
import ASTNodes.Enums.*;
import ASTNodes.Interfaces.*;

import java.util.ArrayList;

/* Parser class name */
class Parser;

/* Terminals (tokens returned by the scanner). */
// const_val terminals
terminal    Integer         INT_CONST;
terminal    Double          REAL_CONST;
terminal    Character       CHAR_CONST;
terminal    Boolean         BOOL_CONST;
terminal    String          STRING_CONST;
terminal    Long            LONG_CONST;

// conditional terminals
terminal                    EQUAL_TO, NOT_EQUAL_TO, GREATER_THAN_EQUAL_TO, LESS_THAN_EQUAL_TO, LESS_THAN, GREATER_THAN;
terminal                    AND_COND, OR_COND;

// arithmatic terminals
terminal                    PLUS, MINUS, TIMES, DIVIDE, MOD, AND_BITWISE, OR_BITWISE, XOR_BITWISE;

// variable terminals
terminal    String          IDENTIFIER;
terminal                    LBRACKET, RBRACKET;
terminal                    DOT;
/* TODO CHECK IF THESE TERMINALS SHOULD BE TWO OR FOUR */
terminal                    PREFIX_PLUS_PLUS, PREFIX_MINUS_MINUS;
terminal                    POSTFIX_PLUS_PLUS, POSTFIX_MINUS_MINUS;

// expr terminals
terminal                    LPAREN, RPAREN;
terminal                    MINUS_UNARY;
/* This not is bitwise negation */
terminal                    TILDE;
/* This not output is boolean */
terminal                    NOT_EXPR;
terminal                    SIZE_OF;

// loop_stmt terminals
terminal                    FOR, SEMICOLON;
terminal                    REPEAT, UNTIL;
terminal                    FOREACH, IN;

// cond_stmt terminals
terminal                    IF, ELSE;
terminal                    SWITCH, OF, COLON, BEGIN, CASE, DEFAULT, END;

// parameters terminals
terminal                    COMMA;

// assignment terminals
terminal                    EQUAL, PLUS_EQUAL, MINUS_EQUAL, TIMES_EQUAL, DIVIDE_EQUAL;

// statement terminals
terminal                    RETURN, BREAK, CONTINUE;

// var_dcl terminals
terminal                    CONST;

// struct_dec terminals
terminal                    RECORD;

// type terminals
terminal                    INT, BOOL, FLOAT, LONG, CHAR, DOUBLE, STRING, VOID, AUTO;

// extern_dcl terminals
terminal                    EXTERN;

// func_dcl terminals
terminal                    FUNCTION;

/* Non terminals */
// Main nonterminals
nonterminal     Program         program;
nonterminal     VarDcl          var_dcl;
nonterminal                     func_extern;
nonterminal     StructDcl       struct_dec;
nonterminal     Type            type;
nonterminal     VarDclCnt       var_dcl_cnt;
nonterminal     Expr            expr;
nonterminal     MethodCall      method_call;
nonterminal     Variable        variable;
nonterminal     ConstValue      const_val;
nonterminal     ArithmaticType  arithmatic;
nonterminal     ConditionType   conditional;
nonterminal     Parameters      parameters;
nonterminal     FuncDcl         func_dcl;
nonterminal     ExternDcl       extern_dcl;
nonterminal     Arguments       arguments;
nonterminal     Block           block;
nonterminal                     statement;
nonterminal     Assignment      assignment;
nonterminal                     cond_stmt, loop_stmt;

// Plus nonterminals
nonterminal     ExprList    brack_expr_plus;
nonterminal     VarDcls     var_dcl_plus;

// Star nonterminals
nonterminal VarDclCnts          comma_var_dcl_cnt_star;
nonterminal ArrayList<Object>   var_dcl_or_statement_star;
nonterminal CaseBlock           case_block_star;

// Optional nonterminals
nonterminal                         l_r_brace_optional;
nonterminal AssignmentOrExpression  assignment_or_expr_optional;

/* Precedences */
precedence left             COMMA;
precedence right            TIMES_EQUAL, DIVIDE_EQUAL, PLUS_EQUAL, MINUS_EQUAL, EQUAL;
precedence left             OR_COND;
precedence left             AND_COND;
precedence left             OR_BITWISE;
precedence left             XOR_BITWISE;
precedence left             AND_BITWISE;
precedence left             EQUAL_TO, NOT_EQUAL_TO;
precedence left             GREATER_THAN, GREATER_THAN_EQUAL_TO, LESS_THAN, LESS_THAN_EQUAL_TO;
precedence left             PLUS, MINUS;
precedence left             TIMES, DIVIDE, MOD;
precedence right            PREFIX_PLUS_PLUS, PREFIX_MINUS_MINUS, SIZE_OF, NOT_EXPR, TILDE, MINUS_UNARY;
precedence nonassoc         LBRACKET, RBRACKET, LPAREN, RPAREN;
precedence left             POSTFIX_PLUS_PLUS, POSTFIX_MINUS_MINUS, DOT;

/* The grammar */
start with program;
program                     ::=     var_dcl:vd program:p
                                    {:
                                        if (p == null) {
                                            p = new Program();
                                        }
                                        p.addElement(vd);
                                        RESULT = p;
                                    :}
                                    |
                                    func_extern:fe program:p
                                    {:
                                        if (p == null) {
                                            p = new Program();
                                        }
                                        p.addElement(fe);
                                        RESULT = p;
                                    :}
                                    |
                                    struct_dec:sd program:p
                                    {:
                                        if (p == null) {
                                            p = new Program();
                                        }
                                        p.addElement(sd);
                                        RESULT = p;
                                    :}
                                    |
                                    {:
                                        RESULT = new Program();
                                    :}
                                    ;

func_extern                 ::=     func_dcl:fd
                                    {:
                                        RESULT = fd;
                                    :}
                                    |
                                    extern_dcl:ed
                                    {:
                                        RESULT = ed;
                                    :}
                                    ;

func_dcl                    ::=     FUNCTION type:t IDENTIFIER:i LPAREN arguments:a RPAREN SEMICOLON
                                    {:
                                        RESULT = new FuncDcl(t, i, a, FuncDclEnum.DECLARE);
                                    :}
                                    |
                                    FUNCTION type:t IDENTIFIER:i LPAREN RPAREN SEMICOLON
                                    {:
                                        RESULT = new FuncDcl(t, i, null, FuncDclEnum.DECLARE);
                                    :}
                                    |
                                    FUNCTION type:t IDENTIFIER:i LPAREN arguments:a RPAREN block:b
                                    {:
                                        RESULT = new FuncDcl(t, i, a, FuncDclEnum.DEFINE, b);
                                    :}
                                    |
                                    FUNCTION type:t IDENTIFIER:i LPAREN RPAREN block:b
                                    {:
                                        RESULT = new FuncDcl(t, i, null, FuncDclEnum.DEFINE, b);
                                    :}
                                    ;

extern_dcl                  ::=     EXTERN type:t IDENTIFIER:i SEMICOLON
                                    {:
                                        RESULT = new ExternDcl(t, i);
                                    :}
                                    ;

arguments                   ::=     type:t IDENTIFIER:i l_r_brace_optional COMMA arguments:a
                                    {:
                                        if (a == null) {
                                            a = new Arguments();
                                        }

                                        a.addElement(new Argument(t, i));
                                        RESULT = a;
                                    :}
                                    |
                                    type:t IDENTIFIER:i l_r_brace_optional
                                    {:
                                        Arguments a = new Arguments();
                                        a.addElement(new Argument(t, i));
                                        RESULT = a;
                                    :}
                                    ;

l_r_brace_optional          ::=     LBRACKET RBRACKET l_r_brace_optional
                                    {:
                                    :}
                                    |
                                    {:
                                    :}
                                    ;

type                        ::=     INT
                                    {:
                                        RESULT = new Type(TypeEnum.INT);
                                    :}
                                    |
                                    BOOL
                                    {:
                                        RESULT = new Type(TypeEnum.BOOL);
                                    :}
                                    |
                                    FLOAT
                                    {:
                                        RESULT = new Type(TypeEnum.FLOAT);
                                    :}
                                    |
                                    LONG
                                    {:
                                        RESULT = new Type(TypeEnum.LONG);
                                    :}
                                    |
                                    CHAR
                                    {:
                                        RESULT = new Type(TypeEnum.CHAR);
                                    :}
                                    |
                                    DOUBLE
                                    {:
                                        RESULT = new Type(TypeEnum.DOUBLE);
                                    :}
                                    |
                                    IDENTIFIER
                                    {:
                                        RESULT = new Type(TypeEnum.IDENTIFIER);
                                    :}
                                    |
                                    STRING
                                    {:
                                        RESULT = new Type(TypeEnum.STRING);
                                    :}
                                    |
                                    VOID
                                    {:
                                        RESULT = new Type(TypeEnum.VOID);
                                    :}
                                    |
                                    AUTO
                                    {:
                                        RESULT = new Type(TypeEnum.AUTO);
                                    :}
                                    ;

struct_dec                  ::=     RECORD IDENTIFIER:i BEGIN var_dcl_plus:vdp END SEMICOLON
                                    {:
                                        RESULT = new StructDcl(i, vdp);
                                    :}
                                    ;

var_dcl                     ::=     CONST type:t var_dcl_cnt:vdc comma_var_dcl_cnt_star:cvdcs SEMICOLON
                                    {:
                                        if (cvdcs == null) {
                                            cvdcs = new VarDclCnts();
                                        }
                                        cvdcs.addElement(vdc);
                                        RESULT = new VarDcl(true, t, cvdcs);
                                    :}
                                    |
                                    type:t var_dcl_cnt:vdc comma_var_dcl_cnt_star:cvdcs SEMICOLON
                                    {:
                                        if (cvdcs == null) {
                                            cvdcs = new VarDclCnts();
                                        }
                                        cvdcs.addElement(vdc);
                                        RESULT = new VarDcl(false, t, cvdcs);
                                    :}
                                    ;

var_dcl_plus                ::=     var_dcl:vd
                                    {:
                                        RESULT = new VarDcls();
                                        RESULT.addElement(vd);
                                    :}
                                    |
                                    var_dcl:vd var_dcl_plus:vdp
                                    {:
                                        if (vdp == null) {
                                            vdp = new VarDcls();
                                        }
                                        vdp.addElement(vd);
                                        RESULT = vdp;
                                    :}
                                    ;

comma_var_dcl_cnt_star      ::=     COMMA var_dcl_cnt:vdc comma_var_dcl_cnt_star:cvdcs
                                    {:
                                        if (cvdcs == null) {
                                            cvdcs = new VarDclCnts();
                                        }
                                        cvdcs.addElement(vdc);
                                        RESULT = cvdcs;
                                    :}
                                    |
                                    {:
                                    :}
                                    ;

var_dcl_cnt                 ::=     IDENTIFIER:i
                                    {:
                                        RESULT = new VarDclCnt(i, null);
                                    :}
                                    |
                                    IDENTIFIER:i EQUAL expr:e
                                    {:
                                        RESULT = new VarDclCnt(i, e);
                                    :}
                                    ;

block                       ::=     BEGIN var_dcl_or_statement_star:vdoss END
                                    {:
                                        Block b = new Block();
                                        b.varDcls_statements = vdoss;
                                        RESULT = b;
                                    :}
                                    ;

var_dcl_or_statement_star   ::=     var_dcl:vd var_dcl_or_statement_star:vdoss
                                    {:
                                        if (vdoss == null) {
                                            vdoss = new ArrayList<Object>();
                                        }
                                        vdoss.add(vd);
                                        RESULT = vdoss;
                                    :}
                                    |
                                    statement:s var_dcl_or_statement_star:vdoss
                                    {:
                                        if (vdoss == null) {
                                            vdoss = new ArrayList<Object>();
                                        }
                                        vdoss.add(s);
                                        RESULT = vdoss;
                                    :}
                                    |
                                    {:
                                        RESULT = new ArrayList<Object>();
                                    :}
                                    ;

statement                   ::=     assignment:a SEMICOLON
                                    {:
                                        RESULT = a;
                                    :}
                                    |
                                    method_call:mc SEMICOLON
                                    {:
                                        RESULT = mc;
                                    :}
                                    |
                                    cond_stmt:cs
                                    {:
                                        RESULT = cs;
                                    :}
                                    |
                                    loop_stmt:ls
                                    {:
                                        RESULT = ls;
                                    :}
                                    |
                                    RETURN expr:e SEMICOLON
                                    {:
                                        RESULT = new Return(e);
                                    :}
                                    |
                                    RETURN SEMICOLON
                                    {:
                                        RESULT = new Return();
                                    :}
                                    |
                                    BREAK SEMICOLON
                                    {:
                                        RESULT = new Break();
                                    :}
                                    |
                                    CONTINUE SEMICOLON
                                    {:
                                        RESULT = new Continue();
                                    :}
                                    ;

assignment                  ::=     variable:v EQUAL expr:e
                                    {:
                                        RESULT = new Assignment(e, v, AssignmentType.EQUAL);
                                    :}
                                    |
                                    variable:v PLUS_EQUAL expr:e
                                    {:
                                        RESULT = new Assignment(e, v, AssignmentType.PLUS_EQUAL);
                                    :}
                                    |
                                    variable:v MINUS_EQUAL expr:e
                                    {:
                                        RESULT = new Assignment(e, v, AssignmentType.MINUS_EQUAL);
                                    :}
                                    |
                                    variable:v TIMES_EQUAL expr:e
                                    {:
                                        RESULT = new Assignment(e, v, AssignmentType.TIMES_EQUAL);
                                    :}
                                    |
                                    variable:v DIVIDE_EQUAL expr:e
                                    {:
                                        RESULT = new Assignment(e, v, AssignmentType.DIVIDE_EQUAL);
                                    :}
                                    ;

method_call                 ::=     IDENTIFIER:i LPAREN parameters:p RPAREN
                                    {:
                                        RESULT = new MethodCall(i, p);
                                    :}
                                    |
                                    IDENTIFIER:i LPAREN RPAREN
                                    {:
                                        RESULT = new MethodCall(i);
                                    :}
                                    ;

parameters                  ::=     expr:e
                                    {:
                                        RESULT = new Parameters();
                                        RESULT.addElement(e);
                                    :}
                                    |
                                    expr:e COMMA parameters:p
                                    {:
                                        if (p == null) {
                                            p = new Parameters();
                                        }
                                        p.addElement(e);
                                        RESULT = p;
                                    :}
                                    ;

cond_stmt                   ::=     IF LPAREN expr:e RPAREN block:b1 ELSE block:b2
                                    {:
                                        RESULT = new If(e, b1, b2);
                                    :}
                                    |
                                    IF LPAREN expr:e RPAREN block:b
                                    {:
                                        RESULT = new If(e, b);
                                    :}
                                    |
                                    SWITCH LPAREN IDENTIFIER:i RPAREN OF COLON BEGIN case_block_star:cbs DEFAULT COLON block:b END
                                    {:
                                        RESULT = new Switch(i, cbs, b);
                                    :}
                                    ;

case_block_star             ::=     CASE INT_CONST:ic COLON block:b case_block_star:cbs
                                    {:
                                        if (cbs == null) {
                                            cbs = new CaseBlock();
                                        }
                                        ConstValue cv = new ConstValue(TypeEnum.INT, ic);
                                        cbs.addElement(new Case(cv, b));
                                        RESULT = cbs;
                                    :}
                                    |
                                    {:
                                    :}
                                    ;

loop_stmt                   ::=     FOR LPAREN assignment:a SEMICOLON expr:e SEMICOLON assignment_or_expr_optional:aoeo RPAREN block:b
                                    {:
                                        RESULT = new For(a, e, b, aoeo);
                                    :}
                                    |
                                    FOR LPAREN SEMICOLON expr:e SEMICOLON assignment_or_expr_optional:aoeo RPAREN block:b
                                    {:
                                        RESULT = new For(e, b, aoeo);
                                    :}
                                    |
                                    REPEAT block:b UNTIL LPAREN expr:e RPAREN SEMICOLON
                                    {:
                                        RESULT = new Repeat(b, e);
                                    :}
                                    |
                                    FOREACH LPAREN IDENTIFIER:i1 IN IDENTIFIER:i2 RPAREN block:b
                                    {:
                                        RESULT = new Foreach(i1, i2, b);
                                    :}
                                    ;

assignment_or_expr_optional ::=     assignment:a
                                    {:
                                        RESULT = new AssignmentOrExpression(a);
                                    :}
                                    |
                                    expr:e
                                    {:
                                        RESULT = new AssignmentOrExpression(e);
                                    :}
                                    |
                                    {:
                                    :}
                                    ;

expr                        ::=     expr:e1 arithmatic:a expr:e2
                                    {:
                                        RESULT = new Expr(e1, e2, a);
                                    :}
                                    |
                                    expr:e1 conditional:c expr:e2
                                    {:
                                        RESULT = new Expr(e1, e2, c);
                                    :}
                                    |
                                    LPAREN expr:e RPAREN
                                    {:
                                        RESULT = e;
                                    :}
                                    |
                                    method_call:mc
                                    {:
                                        RESULT = mc;
                                    :}
                                    |
                                    variable:v
                                    {:
                                        RESULT = v;
                                    :}
                                    |
                                    const_val:cv
                                    {:
                                        RESULT = cv;
                                    :}
                                    |
                                    MINUS_UNARY expr:e
                                    {:
                                        e.setOpType(UnaryOperators.MINUS);
                                        RESULT = e;
                                    :}
                                    |
                                    TILDE expr:e
                                    {:
                                        e.setOpType(UnaryOperators.TILDE);
                                        RESULT = e;
                                    :}
                                    |
                                    NOT_EXPR expr:e
                                    {:
                                        e.setOpType(UnaryOperators.NOT);
                                        RESULT = e;
                                    :}
                                    |
                                    SIZE_OF LPAREN type:t RPAREN
                                    {:
                                        RESULT = new SizeOf(t);
                                    :}
                                    ;

variable                    ::=     IDENTIFIER:i
                                    {:
                                        RESULT = new Variable(i);
                                    :}
                                    |
                                    IDENTIFIER:i LBRACKET expr:e RBRACKET brack_expr_plus:bep
                                    {:
                                        if (bep == null) {
                                            bep = new ExprList();
                                        }
                                        bep.addElement(e);
                                        RESULT = new Variable(i, bep);
                                    :}
                                    |
                                    variable:v DOT IDENTIFIER:i
                                    {:
                                        //TODO NEEDS FIXING PROBABLY
                                        RESULT = new Variable(i);
                                    :}
                                    |
                                    PREFIX_MINUS_MINUS variable:v
                                    {:
                                        RESULT = new UnaryExecution(v, UnaryOperators.MINUS_MINUS);
                                    :}
                                    |
                                    PREFIX_PLUS_PLUS variable:v
                                    {:
                                        RESULT = new UnaryExecution(v, UnaryOperators.PLUS_PLUS);
                                    :}
                                    |
                                    variable:v POSTFIX_MINUS_MINUS
                                    {:
                                        RESULT = new UnaryExecution(v, UnaryOperators.MINUS_MINUS);
                                    :}
                                    |
                                    variable:v POSTFIX_PLUS_PLUS
                                    {:
                                        RESULT = new UnaryExecution(v, UnaryOperators.PLUS_PLUS);
                                    :}
                                    ;

brack_expr_plus             ::=     LBRACKET expr:e RBRACKET brack_expr_plus:bep
                                    {:
                                        if (bep == null) {
                                            bep = new ExprList();
                                        }
                                        bep.addElement(e);
                                        RESULT = bep;
                                    :}
                                    |
                                    {:
                                    :}
                                    ;

arithmatic                  ::=     PLUS
                                    {:
                                        RESULT = ArithmaticType.PLUS;
                                    :}
                                    |
                                    MINUS
                                    {:
                                        RESULT = ArithmaticType.MINUS;
                                    :}
                                    |
                                    TIMES
                                    {:
                                        RESULT = ArithmaticType.TIMES;
                                    :}
                                    |
                                    DIVIDE
                                    {:
                                        RESULT = ArithmaticType.DIVIDE;
                                    :}
                                    |
                                    MOD
                                    {:
                                        RESULT = ArithmaticType.MOD;
                                    :}
                                    |
                                    AND_BITWISE
                                    {:
                                        RESULT = ArithmaticType.AND;
                                    :}
                                    |
                                    OR_BITWISE
                                    {:
                                        RESULT = ArithmaticType.OR;
                                    :}
                                    |
                                    XOR_BITWISE
                                    {:
                                        RESULT = ArithmaticType.XOR;
                                    :}
                                    ;

conditional                 ::=     EQUAL_TO
                                    {:
                                        RESULT = ConditionType.EQUAL_TO;
                                    :}
                                    |
                                    NOT_EQUAL_TO
                                    {:
                                        RESULT = ConditionType.NOT_EQUAL_TO;
                                    :}
                                    |
                                    GREATER_THAN_EQUAL_TO
                                    {:
                                        RESULT = ConditionType.GREATER_THAN_EQUAL_TO;
                                    :}
                                    |
                                    LESS_THAN_EQUAL_TO
                                    {:
                                        RESULT = ConditionType.LESS_THAN_EQUAL_TO;
                                    :}
                                    |
                                    LESS_THAN
                                    {:
                                        RESULT = ConditionType.LESS_THAN;
                                    :}
                                    |
                                    GREATER_THAN
                                    {:
                                        RESULT = ConditionType.GREATER_THAN;
                                    :}
                                    |
                                    AND_COND
                                    {:
                                        RESULT = ConditionType.AND_COND;
                                    :}
                                    |
                                    OR_COND
                                    {:
                                        RESULT = ConditionType.OR_COND;
                                    :}
                                    ;

const_val                   ::=     INT_CONST:i
                                    {:
                                        RESULT = new ConstValue(TypeEnum.INT, i);
                                    :}
                                    |
                                    REAL_CONST:i
                                    {:
                                        RESULT = new ConstValue(TypeEnum.DOUBLE, i);
                                    :}
                                    |
                                    CHAR_CONST:i
                                    {:
                                        RESULT = new ConstValue(TypeEnum.CHAR, i);
                                    :}
                                    |
                                    BOOL_CONST:i
                                    {:
                                        RESULT = new ConstValue(TypeEnum.BOOL, i);
                                    :}
                                    |
                                    STRING_CONST:i
                                    {:
                                        RESULT = new ConstValue(TypeEnum.STRING, i);
                                    :}
                                    |
                                    LONG_CONST:i
                                    {:
                                        RESULT = new ConstValue(TypeEnum.LONG, i);
                                    :}
                                    ;