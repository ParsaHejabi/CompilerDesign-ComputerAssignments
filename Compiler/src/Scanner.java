/* The following code was generated by JFlex 1.7.0 */

import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/parsahejabi/University/Term 6/CompilerDesign/Homeworks/ComputerAssignment/Compiler/src/jflex/Specifications.flex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int ENDCHAR = 6;
  public static final int SPECIALCHARSTR = 8;
  public static final int SPECIALCHAR = 10;
  public static final int POSTFIXID = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   * at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int[] ZZ_LEXSTATE = {
          0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 3, 3, 5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\17\2\0\1\16\22\0\1\15\1\46\1\66\1\21"+
    "\1\0\1\56\1\52\1\67\1\57\1\60\1\55\1\13\1\61\1\14"+
    "\1\10\1\20\1\3\11\2\1\62\1\63\1\47\1\45\1\50\2\0"+
    "\4\7\1\12\1\7\21\1\1\5\2\1\1\64\1\70\1\65\1\54"+
    "\1\1\1\0\1\31\1\22\1\33\1\40\1\11\1\6\1\23\1\35"+
    "\1\24\1\1\1\32\1\27\1\1\1\25\1\26\1\44\1\1\1\30"+
    "\1\34\1\36\1\37\1\43\1\42\1\4\1\1\1\41\1\0\1\53"+
    "\1\0\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\2\1\4\1\2\1\5"+
    "\1\6\2\7\1\10\1\1\15\2\1\11\1\1\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\1\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\3\0\7\2\1\47"+
    "\1\50\1\51\1\52\1\0\1\53\1\7\3\2\1\54"+
    "\1\55\1\2\1\56\1\57\17\2\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\0\1\3\1\73\4\2\1\74\1\2\2\0\3\2"+
    "\1\75\1\76\4\2\1\77\20\2\1\100\1\0\1\2"+
    "\1\101\1\2\1\102\3\2\1\103\2\2\1\104\1\105"+
    "\3\2\1\106\3\2\1\107\1\2\1\110\2\2\1\111"+
    "\1\112\3\2\1\113\4\2\1\114\4\2\1\115\1\116"+
    "\1\117\1\120\1\2\1\121\1\122\1\123\1\2\1\124"+
    "\1\125\2\2\1\126\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0156"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u0759\0\u0792\0\u0156\0\u0156\0\u0156\0\u0156"+
    "\0\u07cb\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0804"+
    "\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0273"+
    "\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\u0a05\0\u0a3e\0\u0156\0\u0156\0\u0156\0\u0156\0\u0a77\0\u0156"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u018f\0\u0b94\0\u0bcd\0\u018f"+
    "\0\u018f\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c"+
    "\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156\0\u0156"+
    "\0\u0156\0\u0156\0\u0156\0\u0273\0\u08af\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u018f\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u018f\0\u018f\0\u11d0\0\u1209\0\u1242\0\u127b\0\u018f"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u018f\0\u1644\0\u167d\0\u018f\0\u16b6\0\u018f\0\u16ef\0\u1728"+
    "\0\u1761\0\u018f\0\u179a\0\u17d3\0\u018f\0\u018f\0\u180c\0\u1845"+
    "\0\u187e\0\u018f\0\u18b7\0\u18f0\0\u1929\0\u018f\0\u1962\0\u018f"+
    "\0\u199b\0\u19d4\0\u018f\0\u018f\0\u1a0d\0\u1a46\0\u1a7f\0\u018f"+
    "\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u018f\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u018f\0\u018f\0\u018f\0\u018f\0\u1c80\0\u018f\0\u018f"+
    "\0\u018f\0\u1cb9\0\u018f\0\u018f\0\u1cf2\0\u1d2b\0\u018f\0\u018f"+
    "\0\u018f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\2\10\1\13\1\10\1\14"+
    "\1\15\1\10\1\16\1\17\1\20\1\21\1\20\1\22"+
    "\1\23\1\24\1\10\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\10\1\33\1\34\1\10\1\35\1\36\1\37"+
    "\2\10\1\40\1\10\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\7\16\64"+
    "\2\7\46\64\1\65\1\64\1\66\16\67\2\7\47\67"+
    "\1\7\1\70\67\7\1\71\26\7\1\72\2\7\1\73"+
    "\5\7\1\74\27\7\1\75\1\76\1\77\71\7\72\0"+
    "\7\10\1\0\2\10\7\0\23\10\26\0\2\11\4\0"+
    "\1\100\2\101\60\0\2\102\2\103\2\0\1\100\2\101"+
    "\57\0\7\10\1\0\2\10\7\0\4\10\1\104\1\105"+
    "\1\10\1\106\5\10\1\107\5\10\26\0\2\100\66\0"+
    "\3\10\1\110\3\10\1\0\2\10\7\0\3\10\1\111"+
    "\1\10\1\112\15\10\37\0\1\113\31\0\1\114\37\0"+
    "\1\115\30\0\1\116\42\0\1\20\72\0\1\117\23\0"+
    "\1\120\44\0\1\121\50\0\7\10\1\0\1\122\1\10"+
    "\7\0\4\10\1\123\1\10\1\124\14\10\25\0\5\10"+
    "\1\125\1\10\1\0\2\10\7\0\3\10\1\126\17\10"+
    "\25\0\7\10\1\0\2\10\7\0\4\10\1\127\16\10"+
    "\25\0\5\10\1\130\1\10\1\0\2\10\7\0\6\10"+
    "\1\131\14\10\25\0\7\10\1\0\2\10\7\0\4\10"+
    "\1\132\16\10\25\0\7\10\1\0\1\133\1\10\7\0"+
    "\23\10\25\0\7\10\1\0\2\10\7\0\3\10\1\134"+
    "\11\10\1\135\5\10\25\0\7\10\1\0\2\10\7\0"+
    "\4\10\1\136\2\10\1\137\3\10\1\140\7\10\25\0"+
    "\7\10\1\0\2\10\7\0\2\10\1\141\11\10\1\142"+
    "\3\10\1\143\2\10\25\0\7\10\1\0\2\10\7\0"+
    "\6\10\1\144\14\10\25\0\7\10\1\0\2\10\7\0"+
    "\3\10\1\145\17\10\25\0\7\10\1\0\1\146\1\10"+
    "\7\0\4\10\1\147\16\10\25\0\7\10\1\0\2\10"+
    "\7\0\4\10\1\150\16\10\71\0\1\151\70\0\1\152"+
    "\70\0\1\153\70\0\1\154\70\0\1\155\50\0\1\156"+
    "\2\0\1\157\5\0\1\160\27\0\1\161\1\162\1\163"+
    "\2\0\2\100\7\0\2\164\56\0\2\102\4\0\1\100"+
    "\2\101\60\0\2\165\2\0\2\165\1\0\2\165\7\0"+
    "\1\165\6\0\1\165\1\0\1\165\4\0\1\165\31\0"+
    "\7\10\1\0\2\10\7\0\6\10\1\166\14\10\25\0"+
    "\7\10\1\0\2\10\7\0\4\10\1\167\16\10\25\0"+
    "\7\10\1\0\2\10\7\0\5\10\1\170\15\10\25\0"+
    "\7\10\1\0\2\10\7\0\3\10\1\171\17\10\25\0"+
    "\7\10\1\0\2\10\7\0\14\10\1\172\6\10\25\0"+
    "\7\10\1\0\2\10\7\0\16\10\1\173\4\10\25\0"+
    "\7\10\1\0\2\10\7\0\12\10\1\174\10\10\24\0"+
    "\21\175\1\176\47\175\16\121\2\0\51\121\1\0\7\10"+
    "\1\0\2\10\7\0\1\10\1\177\21\10\25\0\7\10"+
    "\1\0\2\10\7\0\4\10\1\200\16\10\25\0\7\10"+
    "\1\0\1\201\1\10\7\0\23\10\25\0\7\10\1\0"+
    "\2\10\7\0\14\10\1\202\6\10\25\0\7\10\1\0"+
    "\2\10\7\0\14\10\1\203\6\10\25\0\7\10\1\0"+
    "\2\10\7\0\3\10\1\204\17\10\25\0\7\10\1\0"+
    "\2\10\7\0\11\10\1\205\2\10\1\206\5\10\1\207"+
    "\25\0\7\10\1\0\2\10\7\0\16\10\1\210\4\10"+
    "\25\0\7\10\1\0\2\10\7\0\14\10\1\211\6\10"+
    "\25\0\7\10\1\0\2\10\7\0\3\10\1\212\17\10"+
    "\25\0\7\10\1\0\2\10\7\0\12\10\1\213\10\10"+
    "\25\0\7\10\1\0\2\10\7\0\7\10\1\214\13\10"+
    "\25\0\7\10\1\0\2\10\7\0\17\10\1\215\3\10"+
    "\25\0\7\10\1\0\2\10\7\0\6\10\1\216\14\10"+
    "\25\0\7\10\1\0\2\10\7\0\2\10\1\217\20\10"+
    "\25\0\7\10\1\0\2\10\7\0\15\10\1\220\5\10"+
    "\25\0\7\10\1\0\2\10\7\0\14\10\1\221\6\10"+
    "\25\0\5\10\1\222\1\10\1\0\2\10\7\0\23\10"+
    "\25\0\7\10\1\0\2\10\7\0\15\10\1\223\5\10"+
    "\25\0\7\10\1\0\2\10\7\0\2\10\1\224\20\10"+
    "\25\0\7\10\1\0\1\225\1\10\7\0\23\10\25\0"+
    "\7\10\1\0\2\10\7\0\7\10\1\226\13\10\25\0"+
    "\7\10\1\0\2\10\7\0\12\10\1\220\10\10\25\0"+
    "\7\10\1\0\2\10\7\0\11\10\1\227\11\10\25\0"+
    "\7\10\1\0\1\230\1\10\7\0\23\10\25\0\7\10"+
    "\1\0\1\231\1\10\7\0\23\10\24\0\21\175\1\232"+
    "\47\175\20\0\1\20\1\176\50\0\7\10\1\0\2\10"+
    "\7\0\2\10\1\233\20\10\25\0\7\10\1\0\2\10"+
    "\7\0\5\10\1\234\15\10\25\0\7\10\1\0\2\10"+
    "\7\0\7\10\1\235\13\10\25\0\7\10\1\0\2\10"+
    "\7\0\1\10\1\236\21\10\25\0\7\10\1\0\2\10"+
    "\7\0\4\10\1\237\16\10\25\0\7\10\1\0\2\10"+
    "\7\0\15\10\1\240\5\10\25\0\7\10\1\0\1\241"+
    "\1\10\7\0\23\10\25\0\7\10\1\0\2\10\7\0"+
    "\4\10\1\242\16\10\25\0\7\10\1\0\2\10\7\0"+
    "\12\10\1\243\1\10\1\244\6\10\25\0\7\10\1\0"+
    "\1\245\1\10\7\0\23\10\25\0\7\10\1\0\2\10"+
    "\7\0\6\10\1\246\14\10\25\0\7\10\1\0\1\247"+
    "\1\10\7\0\23\10\25\0\7\10\1\0\2\10\7\0"+
    "\2\10\1\250\20\10\25\0\7\10\1\0\2\10\7\0"+
    "\14\10\1\251\6\10\25\0\7\10\1\0\1\252\1\10"+
    "\7\0\23\10\25\0\7\10\1\0\2\10\7\0\2\10"+
    "\1\253\20\10\25\0\7\10\1\0\2\10\7\0\7\10"+
    "\1\254\13\10\25\0\7\10\1\0\2\10\7\0\1\255"+
    "\22\10\25\0\7\10\1\0\2\10\7\0\16\10\1\256"+
    "\4\10\25\0\7\10\1\0\2\10\7\0\7\10\1\257"+
    "\13\10\25\0\7\10\1\0\2\10\7\0\14\10\1\260"+
    "\6\10\25\0\7\10\1\0\2\10\7\0\14\10\1\261"+
    "\6\10\25\0\7\10\1\0\2\10\7\0\6\10\1\262"+
    "\14\10\24\0\20\175\1\20\1\232\47\175\1\0\7\10"+
    "\1\0\2\10\7\0\3\10\1\263\17\10\25\0\7\10"+
    "\1\0\2\10\7\0\10\10\1\264\12\10\25\0\7\10"+
    "\1\0\2\10\7\0\6\10\1\265\14\10\25\0\7\10"+
    "\1\0\2\10\7\0\6\10\1\266\14\10\25\0\7\10"+
    "\1\0\2\10\7\0\7\10\1\267\13\10\25\0\7\10"+
    "\1\0\2\10\7\0\14\10\1\270\6\10\25\0\7\10"+
    "\1\0\2\10\7\0\2\10\1\271\20\10\25\0\7\10"+
    "\1\0\2\10\7\0\4\10\1\272\16\10\25\0\7\10"+
    "\1\0\2\10\7\0\3\10\1\273\17\10\25\0\7\10"+
    "\1\0\2\10\7\0\11\10\1\274\11\10\25\0\7\10"+
    "\1\0\2\10\7\0\5\10\1\275\15\10\25\0\7\10"+
    "\1\0\2\10\7\0\15\10\1\276\5\10\25\0\7\10"+
    "\1\0\2\10\7\0\5\10\1\277\15\10\25\0\7\10"+
    "\1\0\2\10\7\0\11\10\1\300\11\10\25\0\7\10"+
    "\1\0\2\10\7\0\2\10\1\301\20\10\25\0\7\10"+
    "\1\0\2\10\7\0\3\10\1\302\17\10\25\0\7\10"+
    "\1\0\2\10\7\0\16\10\1\303\4\10\25\0\7\10"+
    "\1\0\2\10\7\0\3\10\1\304\17\10\25\0\7\10"+
    "\1\0\2\10\7\0\14\10\1\305\6\10\25\0\7\10"+
    "\1\0\2\10\7\0\3\10\1\306\17\10\25\0\5\10"+
    "\1\307\1\10\1\0\2\10\7\0\23\10\25\0\7\10"+
    "\1\0\2\10\7\0\1\10\1\310\21\10\25\0\7\10"+
    "\1\0\2\10\7\0\13\10\1\311\7\10\25\0\7\10"+
    "\1\0\2\10\7\0\5\10\1\312\15\10\25\0\7\10"+
    "\1\0\1\313\1\10\7\0\23\10\25\0\7\10\1\0"+
    "\2\10\7\0\13\10\1\314\7\10\25\0\7\10\1\0"+
    "\2\10\7\0\4\10\1\315\16\10\25\0\7\10\1\0"+
    "\2\10\7\0\15\10\1\316\5\10\25\0\7\10\1\0"+
    "\2\10\7\0\14\10\1\317\6\10\25\0\7\10\1\0"+
    "\2\10\7\0\3\10\1\320\17\10\25\0\7\10\1\0"+
    "\1\321\1\10\7\0\23\10\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\10\1\1\11\24\1\4\11\1\1\16\11"+
    "\1\1\7\11\1\1\3\0\7\1\4\11\1\0\1\11"+
    "\30\1\13\11\1\0\10\1\2\0\33\1\1\0\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[209];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /**
   * this buffer contains the current text to be matched and is
   * the source of the yytext() string
   */
  private char[] zzBuffer = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
     StringBuffer string = new StringBuffer();
     public Scanner(java.io.Reader in, ComplexSymbolFactory sf){
         this(in);
         symbolFactory = sf;
     }
     ComplexSymbolFactory symbolFactory;

     private Symbol symbol(String name, int sym) {
         return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+yylength(),yychar+yylength()));
     }

     private Symbol symbol(String name, int sym, Object val) {
         Location left = new Location(yyline+1,yycolumn+1,yychar);
         Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
         return symbolFactory.newSymbol(name, sym, left, right,val);
     }
     private Symbol symbol(String name, int sym, Object val,int buflength) {
         Location left = new Location(yyline+1,yycolumn+yylength()-buflength,yychar+yylength()-buflength);
         Location right= new Location(yyline+1,yycolumn+yylength(), yychar+yylength());
         return symbolFactory.newSymbol(name, sym, left, right,val);
     }
     private void error(String message) {
         System.out.println("Error at line "+(yyline+1)+", column "+(yycolumn+1)+" : "+message);
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char[] newBuffer = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expr.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expr is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {      return symbolFactory.newSymbol("EOF", ParserSym.EOF, new Location(yyline+1,yycolumn+1,yychar), new Location(yyline+1,yycolumn+1,yychar+1));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { error("Illegal character <"+ yytext()+">");
            } 
            // fall through
          case 89: break;
          case 2: 
            { return symbol(yytext(), ParserSym.IDENTIFIER);
            } 
            // fall through
          case 90: break;
          case 3: 
            { return symbol(yytext(), ParserSym.INT_CONST);
            } 
            // fall through
          case 91: break;
          case 4: 
            { return symbol(yytext(), ParserSym.DOT);
            } 
            // fall through
          case 92: break;
          case 5: 
            { return symbol(yytext(), ParserSym.PLUS);
            } 
            // fall through
          case 93: break;
          case 6: 
            { return symbol(yytext(), ParserSym.MINUS);
            } 
            // fall through
          case 94: break;
          case 7: 
            { 
            } 
            // fall through
          case 95: break;
          case 8: 
            { return symbol(yytext(), ParserSym.DIVIDE);
            } 
            // fall through
          case 96: break;
          case 9: 
            { return symbol(yytext(), ParserSym.EQUAL);
            } 
            // fall through
          case 97: break;
          case 10: 
            { return symbol(yytext(), ParserSym.LESS_THAN);
            } 
            // fall through
          case 98: break;
          case 11: 
            { return symbol(yytext(), ParserSym.GREATER_THAN);
            } 
            // fall through
          case 99: break;
          case 12: 
            { return symbol(yytext(), ParserSym.TILDE);
            } 
            // fall through
          case 100: break;
          case 13: 
            { return symbol(yytext(), ParserSym.AND_BITWISE);
            } 
            // fall through
          case 101: break;
          case 14: 
            { return symbol(yytext(), ParserSym.OR_BITWISE);
            } 
            // fall through
          case 102: break;
          case 15: 
            { return symbol(yytext(), ParserSym.XOR_BITWISE);
            } 
            // fall through
          case 103: break;
          case 16: 
            { return symbol(yytext(), ParserSym.TIMES);
            } 
            // fall through
          case 104: break;
          case 17: 
            { return symbol(yytext(), ParserSym.MOD);
            } 
            // fall through
          case 105: break;
          case 18: 
            { return symbol(yytext(), ParserSym.LPAREN);
            } 
            // fall through
          case 106: break;
          case 19: 
            { return symbol(yytext(), ParserSym.RPAREN);
            } 
            // fall through
          case 107: break;
          case 20: 
            { return symbol(yytext(), ParserSym.COMMA);
            } 
            // fall through
          case 108: break;
          case 21: 
            { return symbol(yytext(), ParserSym.COLON);
            } 
            // fall through
          case 109: break;
          case 22: 
            { return symbol(yytext(), ParserSym.SEMICOLON);
            } 
            // fall through
          case 110: break;
          case 23: 
            { return symbol(yytext(), ParserSym.LBRACKET);
            } 
            // fall through
          case 111: break;
          case 24: 
            { return symbol(yytext(), ParserSym.RBRACKET);
            } 
            // fall through
          case 112: break;
          case 25: 
            { string.setLength(0); string.append(yytext()); yybegin(STRING);
            } 
            // fall through
          case 113: break;
          case 26: 
            { string.setLength(0); string.append(yytext()); yybegin(CHAR);
            } 
            // fall through
          case 114: break;
          case 27: 
            { string.append(yytext());
            } 
            // fall through
          case 115: break;
          case 28: 
            { string.append(yytext()); yybegin(YYINITIAL); return symbol(string.toString(),ParserSym.STRING_CONST);
            } 
            // fall through
          case 116: break;
          case 29: 
            { yybegin(SPECIALCHARSTR);
            } 
            // fall through
          case 117: break;
          case 30: 
            { string.append(yytext()); yybegin(ENDCHAR);
            } 
            // fall through
          case 118: break;
          case 31: 
            { string.append(yytext()); yybegin(YYINITIAL); return symbol(string.toString(), ParserSym.CHAR_CONST);
            } 
            // fall through
          case 119: break;
          case 32: 
            { string.append("\\n"); yybegin(STRING); return symbol("\\n", ParserSym.CHAR_CONST);
            } 
            // fall through
          case 120: break;
          case 33: 
            { string.append("\\r"); yybegin(STRING); return symbol("\\r", ParserSym.CHAR_CONST);
            } 
            // fall through
          case 121: break;
          case 34: 
            { string.append("\\t"); yybegin(STRING); return symbol("\\t", ParserSym.CHAR_CONST);
            } 
            // fall through
          case 122: break;
          case 35: 
            { string.append("\\\""); yybegin(STRING); return symbol("\\\"", ParserSym.CHAR_CONST);
            } 
            // fall through
          case 123: break;
          case 36: 
            { string.append("\\\'"); yybegin(STRING); return symbol("\\\'", ParserSym.CHAR_CONST);
            } 
            // fall through
          case 124: break;
          case 37: 
            { string.append("\\\\"); yybegin(STRING); return symbol("\\\\", ParserSym.CHAR_CONST);
            } 
            // fall through
          case 125: break;
          case 38: 
            { return symbol(yytext(), ParserSym.REAL_CONST);
            } 
            // fall through
          case 126: break;
          case 39: 
            { return symbol(yytext(), ParserSym.PREFIX_PLUS_PLUS);
            } 
            // fall through
          case 127: break;
          case 40: 
            { return symbol(yytext(), ParserSym.PLUS_EQUAL);
            } 
            // fall through
          case 128: break;
          case 41: 
            { return symbol(yytext(), ParserSym.PREFIX_MINUS_MINUS);
            } 
            // fall through
          case 129: break;
          case 42: 
            { return symbol(yytext(), ParserSym.MINUS_EQUAL);
            } 
            // fall through
          case 130: break;
          case 43: 
            { return symbol(yytext(), ParserSym.DIVIDE_EQUAL);
            } 
            // fall through
          case 131: break;
          case 44: 
            { return symbol(yytext(), ParserSym.IF);
            } 
            // fall through
          case 132: break;
          case 45: 
            { return symbol(yytext(), ParserSym.IN);
            } 
            // fall through
          case 133: break;
          case 46: 
            { return symbol(yytext(), ParserSym.OF);
            } 
            // fall through
          case 134: break;
          case 47: 
            { return symbol(yytext(), ParserSym.OR_COND);
            } 
            // fall through
          case 135: break;
          case 48: 
            { return symbol(yytext(), ParserSym.EQUAL_TO);
            } 
            // fall through
          case 136: break;
          case 49: 
            { return symbol(yytext(), ParserSym.NOT_EQUAL_TO);
            } 
            // fall through
          case 137: break;
          case 50: 
            { return symbol(yytext(), ParserSym.LESS_THAN_EQUAL_TO);
            } 
            // fall through
          case 138: break;
          case 51: 
            { return symbol(yytext(), ParserSym.GREATER_THAN_EQUAL_TO);
            } 
            // fall through
          case 139: break;
          case 52: 
            { return symbol(yytext(), ParserSym.TIMES_EQUAL);
            } 
            // fall through
          case 140: break;
          case 53: 
            { string.append("\\n"); yybegin(SPECIALCHAR);
            } 
            // fall through
          case 141: break;
          case 54: 
            { string.append("\\r"); yybegin(SPECIALCHAR);
            } 
            // fall through
          case 142: break;
          case 55: 
            { string.append("\\t"); yybegin(SPECIALCHAR);
            } 
            // fall through
          case 143: break;
          case 56: 
            { string.append("\\\""); yybegin(SPECIALCHAR);
            } 
            // fall through
          case 144: break;
          case 57: 
            { string.append("\\\'"); yybegin(SPECIALCHAR);
            } 
            // fall through
          case 145: break;
          case 58: 
            { string.append("\\\\"); yybegin(SPECIALCHAR);
            } 
            // fall through
          case 146: break;
          case 59: 
            { return symbol(yytext(), ParserSym.FOR);
            } 
            // fall through
          case 147: break;
          case 60: 
            { return symbol(yytext(), ParserSym.END);
            } 
            // fall through
          case 148: break;
          case 61: 
            { return symbol(yytext(), ParserSym.INT);
            } 
            // fall through
          case 149: break;
          case 62: 
            { return symbol(yytext(), ParserSym.NOT_EXPR);
            } 
            // fall through
          case 150: break;
          case 63: 
            { return symbol(yytext(), ParserSym.AND_COND);
            } 
            // fall through
          case 151: break;
          case 64: 
            { return symbol(yytext(), ParserSym.ELSE);
            } 
            // fall through
          case 152: break;
          case 65: 
            { return symbol(yytext(), ParserSym.BOOL);
            } 
            // fall through
          case 153: break;
          case 66: 
            { return symbol(yytext(), ParserSym.LONG);
            } 
            // fall through
          case 154: break;
          case 67: 
            { return symbol(yytext(), ParserSym.AUTO);
            } 
            // fall through
          case 155: break;
          case 68: 
            { return symbol(yytext(), ParserSym.CASE);
            } 
            // fall through
          case 156: break;
          case 69: 
            { return symbol(yytext(), ParserSym.CHAR);
            } 
            // fall through
          case 157: break;
          case 70: 
            { return symbol(yytext(), ParserSym.BOOL_CONST);
            } 
            // fall through
          case 158: break;
          case 71: 
            { return symbol(yytext(), ParserSym.VOID);
            } 
            // fall through
          case 159: break;
          case 72: 
            { return symbol(yytext(), ParserSym.FLOAT);
            } 
            // fall through
          case 160: break;
          case 73: 
            { return symbol(yytext(), ParserSym.BEGIN);
            } 
            // fall through
          case 161: break;
          case 74: 
            { return symbol(yytext(), ParserSym.BREAK);
            } 
            // fall through
          case 162: break;
          case 75: 
            { return symbol(yytext(), ParserSym.CONST);
            } 
            // fall through
          case 163: break;
          case 76: 
            { return symbol(yytext(), ParserSym.UNTIL);
            } 
            // fall through
          case 164: break;
          case 77: 
            { return symbol(yytext(), ParserSym.EXTERN);
            } 
            // fall through
          case 165: break;
          case 78: 
            { return symbol(yytext(), ParserSym.RECORD);
            } 
            // fall through
          case 166: break;
          case 79: 
            { return symbol(yytext(), ParserSym.RETURN);
            } 
            // fall through
          case 167: break;
          case 80: 
            { return symbol(yytext(), ParserSym.REPEAT);
            } 
            // fall through
          case 168: break;
          case 81: 
            { return symbol(yytext(), ParserSym.SIZE_OF);
            } 
            // fall through
          case 169: break;
          case 82: 
            { return symbol(yytext(), ParserSym.STRING);
            } 
            // fall through
          case 170: break;
          case 83: 
            { return symbol(yytext(), ParserSym.SWITCH);
            } 
            // fall through
          case 171: break;
          case 84: 
            { return symbol(yytext(), ParserSym.DOUBLE);
            } 
            // fall through
          case 172: break;
          case 85: 
            { return symbol(yytext(), ParserSym.FOREACH);
            } 
            // fall through
          case 173: break;
          case 86: 
            { return symbol(yytext(), ParserSym.DEFAULT);
            } 
            // fall through
          case 174: break;
          case 87: 
            { return symbol(yytext(), ParserSym.FUNCTION);
            } 
            // fall through
          case 175: break;
          case 88: 
            { return symbol(yytext(), ParserSym.CONTINUE);
            } 
            // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
